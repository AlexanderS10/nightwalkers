// app/custom-components/MapComponent.js
import React, { useEffect, useRef, useState } from 'react';

const MapComponent = ({ mapboxToken, startCoords, endCoords }) => {
  const mapRef = useRef(null);
  const mapInstance = useRef(null);
  const routingControl = useRef(null);
  const [mapLoaded, setMapLoaded] = useState(false);
  const [userLocation, setUserLocation] = useState(null);
  const [isGettingLocation, setIsGettingLocation] = useState(false);
  const [locationDenied, setLocationDenied] = useState(false);
  const [error, setError] = useState(null);
  const [routeReady, setRouteReady] = useState(false);
  
  // First initialization effect - create map and get location
  useEffect(() => {
    if (typeof window === 'undefined' || !mapRef.current || !mapboxToken) return;
    
    console.log("Main effect running, initializing map");
    
    let isMounted = true;
    
    // Clean up previous map instance to avoid memory leaks
    if (mapInstance.current) {
      try {
        mapInstance.current.remove();
      } catch (error) {
        console.warn("Error removing previous map:", error);
      }
      mapInstance.current = null;
    }
    
    // Function to handle location acquisition
    const getLocation = () => {
      // Use provided startCoords if available
      if (startCoords) {
        console.log("Using provided startCoords:", startCoords);
        setUserLocation(startCoords);
        setIsGettingLocation(false);
        return;
      }
      
      // Otherwise try to get browser location
      setIsGettingLocation(true);
      
      const timeoutId = setTimeout(() => {
        if (isMounted && isGettingLocation) {
          console.log('Geolocation timed out, using default location');
          setUserLocation([40.7128, -74.0060]); // NYC as fallback
          setIsGettingLocation(false);
        }
      }, 5000);
      
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            if (!isMounted) return;
            
            console.log('Got user location:', position.coords);
            const { latitude, longitude } = position.coords;
            setUserLocation([latitude, longitude]);
            setIsGettingLocation(false);
            clearTimeout(timeoutId);
          },
          (error) => {
            if (!isMounted) return;
            
            console.warn('Geolocation error:', error.message);
            if (error.code === error.PERMISSION_DENIED) {
              setLocationDenied(true);
            }
            setUserLocation([40.7128, -74.0060]); // NYC as fallback
            setIsGettingLocation(false);
            clearTimeout(timeoutId);
          },
          { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
        );
      } else {
        console.log('Geolocation not available');
        setUserLocation([40.7128, -74.0060]); // NYC as fallback
        setIsGettingLocation(false);
        clearTimeout(timeoutId);
      }
      
      return () => clearTimeout(timeoutId);
    };
    
    // Initialize Leaflet map
    const initMap = async () => {
      try {
        // Load Leaflet and its CSS
        const L = await import('leaflet');
        await import('leaflet/dist/leaflet.css');
        
        // Fix Leaflet icon issues
        delete L.Icon.Default.prototype._getIconUrl;
        L.Icon.Default.mergeOptions({
          iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
          iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
          shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
        });
        
        // Get the location first
        getLocation();
        
        // Create a map centered on a default location (will be updated when we have the actual location)
        console.log('Creating initial map');
        const initLocation = userLocation || [40.7128, -74.0060]; // Use NYC as default
        const map = L.map(mapRef.current).setView(initLocation, 15);
        mapInstance.current = map;
        
        // Add base tiles
        L.tileLayer(`https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=${mapboxToken}`, {
          attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
          maxZoom: 18,
          id: 'mapbox/streets-v11',
          tileSize: 512,
          zoomOffset: -1,
          accessToken: mapboxToken,
        }).addTo(map);
        
        // Add CSS for the pulsing effect
        if (!document.getElementById('map-pulse-style')) {
          const pulseStyle = document.createElement('style');
          pulseStyle.id = 'map-pulse-style';
          pulseStyle.innerHTML = `
            @keyframes pulse-ring {
              0% {
                transform: scale(0.5);
                opacity: 0.8;
              }
              80%, 100% {
                transform: scale(2);
                opacity: 0;
              }
            }
            
            .user-location-pulse {
              position: relative;
              display: flex;
              justify-content: center;
              align-items: center;
              width: 100%;
              height: 100%;
            }
            
            .user-location-dot {
              background-color: #4F46E5;
              width: 23px;
              height: 23px;
              border-radius: 50%;
              border: 3px solid white;
              box-shadow: 0 1px 3px rgba(0,0,0,0.3);
            }
            
            .user-location-pulse::after {
              content: '';
              position: absolute;
              width: 20px;
              height: 20px;
              background: rgba(79, 70, 229, 0.4);
              border-radius: 50%;
              z-index: -1;
              animation: pulse-ring 2s infinite;
            }
          `;
          document.head.appendChild(pulseStyle);
        }
        
        // Create a user marker style with pulse effect
        const userIcon = L.divIcon({
          className: 'custom-user-marker-icon',
          html: `
            <div class="user-location-pulse">
              <div class="user-location-dot"></div>
            </div>
          `,
          iconSize: [30, 30],
          iconAnchor: [15, 15]
        });
        
        // If we already have user location, create a marker
        if (userLocation) {
          map._userMarker = L.marker(userLocation, {
            icon: userIcon,
            zIndexOffset: 1000
          }).addTo(map);
          map.setView(userLocation, 15);
        }
        
        // Add locate button
        const locateButton = L.DomUtil.create('div', 'leaflet-control');
        locateButton.innerHTML = `
          <div class="bg-white rounded-md shadow-md p-2 cursor-pointer hover:bg-gray-100">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-indigo-600">
              <circle cx="12" cy="12" r="10"></circle>
              <circle cx="12" cy="12" r="1"></circle>
            </svg>
          </div>
        `;
        locateButton.style.position = 'absolute';
        locateButton.style.left = '10px';
        locateButton.style.top = '80px';
        locateButton.style.zIndex = '1000';
        
        // Add the control directly to the container
        mapRef.current.appendChild(locateButton);
        
        // Handle the locate button click
        locateButton.addEventListener('click', (e) => {
          e.stopPropagation();
          if (userLocation) {
            map.setView(userLocation, 15);
            
            // Flash the user marker to make it obvious
            if (map._userMarker) {
              map._userMarker.setOpacity(0.5);
              setTimeout(() => {
                if (map._userMarker) {
                  map._userMarker.setOpacity(1);
                }
              }, 500);
            }
          }
        });
        
        // Mark the map as loaded
        console.log('Map initialized successfully');
        setMapLoaded(true);
        
      } catch (error) {
        console.error('Error initializing map:', error);
        setError('Failed to load map. Please try again later.');
      }
    };
    
    // Initialize the map
    initMap();
    
    // Clean up function
    return () => {
      isMounted = false;
      if (mapInstance.current) {
        try {
          mapInstance.current.remove();
          mapInstance.current = null;
        } catch (e) {
          console.warn('Error removing map:', e);
        }
      }
    };
  }, [mapboxToken]); // Only recreate map when token changes
  
  // Update user location when startCoords changes
  useEffect(() => {
    if (!mapInstance.current || !startCoords) return;
    
    console.log("Updating map with new startCoords:", startCoords);
    setUserLocation(startCoords);
    
    // Update map and markers
    try {
      // Update user marker if it exists
      if (mapInstance.current._userMarker) {
        mapInstance.current._userMarker.setLatLng(startCoords);
      } else {
        // Create user marker style with pulse effect
        const L = window.L; // Use globally available L
        const userIcon = L.divIcon({
          className: 'custom-user-marker-icon',
          html: `
            <div class="user-location-pulse">
              <div class="user-location-dot"></div>
            </div>
          `,
          iconSize: [30, 30],
          iconAnchor: [15, 15]
        });
        
        // Create marker
        mapInstance.current._userMarker = L.marker(startCoords, {
          icon: userIcon,
          zIndexOffset: 1000
        }).addTo(mapInstance.current);
      }
      
      mapInstance.current.setView(startCoords, 15);
    } catch (err) {
      console.error("Error updating map with new start coordinates:", err);
    }
  }, [startCoords]);
  
  // Handle routing when both startCoords and endCoords are available
  useEffect(() => {
    // Skip if we don't have all required parts
    if (!mapLoaded || !mapInstance.current || !userLocation || !endCoords) {
      console.log("Skipping routing setup - prerequisites not met:", { 
        mapLoaded, 
        mapInstance: !!mapInstance.current, 
        userLocation, 
        endCoords,
        routeReady
      });
      return;
    }
    
    const setupRouting = async () => {
      try {
        console.log("Setting up routing with:", { userLocation, endCoords });
        setRouteReady(true);
        
        // Import required libraries
        const L = window.L; // Use globally available L
        await import('leaflet-routing-machine/dist/leaflet-routing-machine.css');
        const RoutingMachine = await import('leaflet-routing-machine');
        
        // Clean up previous routing if it exists
        if (routingControl.current) {
          try {
            console.log("Removing previous routing control");
            mapInstance.current.removeControl(routingControl.current);
            routingControl.current = null;
          } catch (e) {
            console.warn("Error removing previous routing:", e);
          }
        }
        
        // Create destination icon
        const destinationIcon = L.divIcon({
          className: 'custom-destination-marker',
          html: `
            <div class="bg-red-500 h-5 w-5 rounded-full border-2 border-white shadow-lg flex items-center justify-center">
              <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
            </div>
          `,
          iconSize: [24, 24],
          iconAnchor: [12, 24]
        });
        
        // Create user icon for start marker
        const userIcon = L.divIcon({
          className: 'custom-user-marker-icon',
          html: `
            <div class="user-location-pulse">
              <div class="user-location-dot"></div>
            </div>
          `,
          iconSize: [30, 30],
          iconAnchor: [15, 15]
        });
        
        // Custom marker creation function
        const createCustomMarker = function(i, waypoint, n) {
          const isStart = i === 0;
          return L.marker(waypoint.latLng, {
            draggable: true,
            icon: isStart ? userIcon : destinationIcon
          });
        };
        
        // Create router using Mapbox
        const createRouter = function() {
          try {
            return L.Routing.mapbox(mapboxToken, {
              profile: 'mapbox/walking',
              steps: true,
              language: 'en'
            });
          } catch (e) {
            console.error("Error creating Mapbox router:", e);
            // Fallback to OSRM
            return L.Routing.osrmv1({
              serviceUrl: 'https://router.project-osrm.org/route/v1',
              profile: 'foot'
            });
          }
        };
        
        // Wait a brief moment for any previous routing cleanup to complete
        setTimeout(() => {
          try {
            // Create the routing control with our options
            const control = L.Routing.control({
              waypoints: [
                L.latLng(userLocation[0], userLocation[1]),
                L.latLng(endCoords[0], endCoords[1])
              ],
              router: createRouter(),
              createMarker: createCustomMarker,
              lineOptions: {
                styles: [{ color: '#6366F1', opacity: 0.8, weight: 6 }],
                extendToWaypoints: true,
                missingRouteTolerance: 0
              },
              routeWhileDragging: true,
              showAlternatives: true,
              addWaypoints: false,
              fitSelectedRoutes: true,
              collapsible: true
            });
            
            // Add control to map
            control.addTo(mapInstance.current);
            
            // Store reference to control
            routingControl.current = control;
            
            // Fit bounds to include both markers
            setTimeout(() => {
              try {
                const bounds = L.latLngBounds([
                  L.latLng(userLocation[0], userLocation[1]),
                  L.latLng(endCoords[0], endCoords[1])
                ]);
                mapInstance.current.fitBounds(bounds, { padding: [50, 50] });
              } catch (e) {
                console.warn("Error fitting bounds:", e);
              }
            }, 1000);
            
            console.log("Routing setup complete");
          } catch (e) {
            console.error("Error creating routing control:", e);
            setError("Failed to set up routing. Please try again.");
          }
        }, 200);
        
      } catch (error) {
        console.error("Error in routing setup:", error);
        setError("Failed to set up routing. Please try again.");
      }
    };
    
    setupRouting();
    
  }, [mapLoaded, userLocation, endCoords, mapboxToken]);
  
  // Update map view when userLocation changes
  useEffect(() => {
    if (!mapInstance.current || !userLocation) return;
    
    // Update map view to show the user's location
    try {
      // Update user marker if it exists
      if (mapInstance.current._userMarker) {
        mapInstance.current._userMarker.setLatLng(userLocation);
      } else {
        // Create a marker if it doesn't exist
        const L = window.L;
        if (L) {
          const userIcon = L.divIcon({
            className: 'custom-user-marker-icon',
            html: `
              <div class="user-location-pulse">
                <div class="user-location-dot"></div>
              </div>
            `,
            iconSize: [30, 30],
            iconAnchor: [15, 15]
          });
          
          mapInstance.current._userMarker = L.marker(userLocation, {
            icon: userIcon,
            zIndexOffset: 1000
          }).addTo(mapInstance.current);
        }
      }
      
      // Only set view if no endCoords (otherwise we'll fit bounds)
      if (!endCoords) {
        mapInstance.current.setView(userLocation, 15);
      }
    } catch (err) {
      console.error("Error updating map with user location:", err);
    }
  }, [userLocation, endCoords]);
  
  // Function to retry getting location
  const retryLocation = () => {
    setIsGettingLocation(true);
    setLocationDenied(false);
    
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log('Got user location on retry:', position.coords);
          const { latitude, longitude } = position.coords;
          setUserLocation([latitude, longitude]);
          setIsGettingLocation(false);
          
          // If map is already loaded, update the view
          if (mapInstance.current) {
            mapInstance.current.setView([latitude, longitude], 15);
            
            // Update user marker if it exists
            if (mapInstance.current._userMarker) {
              mapInstance.current._userMarker.setLatLng([latitude, longitude]);
            }
          }
        },
        (error) => {
          console.warn('Geolocation retry error:', error.message);
          if (error.code === error.PERMISSION_DENIED) {
            setLocationDenied(true);
          }
          setIsGettingLocation(false);
        },
        { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }
      );
    } else {
      setIsGettingLocation(false);
    }
  };
  
  return (
    <div className="relative w-full h-[500px] rounded-lg overflow-hidden shadow-lg">
      {error && (
        <div className="absolute inset-0 flex items-center justify-center bg-red-100 z-50">
          <div className="text-lg font-semibold text-red-700 p-4 bg-white rounded-md shadow-md">
            {error}
            <button 
              onClick={() => setError(null)} 
              className="ml-2 px-2 py-1 bg-red-600 text-white text-xs rounded"
            >
              Dismiss
            </button>
          </div>
        </div>
      )}
      
      <div ref={mapRef} className="w-full h-full" />
      
      {/* Location permission notice */}
      {locationDenied && mapLoaded && !startCoords && (
        <div className="absolute top-0 left-0 right-0 bg-yellow-100 p-3 z-40 m-2 rounded-md shadow-md">
          <div className="flex items-center justify-between">
            <p className="text-sm text-yellow-800">
              <span className="font-semibold">Location access denied.</span> We're using a default location.
            </p>
            <button 
              onClick={retryLocation}
              className="ml-3 px-3 py-1 bg-indigo-600 text-white text-xs font-medium rounded hover:bg-indigo-700 focus:outline-none"
            >
              Allow Location
            </button>
          </div>
        </div>
      )}
      
      {isGettingLocation && (
        <div className="absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-80 z-40">
          <div className="flex flex-col items-center">
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-indigo-600 mb-2"></div>
            <div className="text-lg font-semibold text-gray-700">Getting your location...</div>
          </div>
        </div>
      )}
      
      {!isGettingLocation && !mapLoaded && (
        <div className="absolute inset-0 flex items-center justify-center bg-gray-100 bg-opacity-80 z-40">
          <div className="flex flex-col items-center">
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-indigo-600 mb-2"></div>
            <div className="text-lg font-semibold text-gray-700">Loading map...</div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MapComponent;